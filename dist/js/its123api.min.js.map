{"version":3,"sources":["webpack:///its123api.min.js","webpack:///webpack/bootstrap fd6b9beb1723572beea5","webpack:///./src/main.js","webpack:///./src/Api/Its123.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_Its","_Its2","window","Its123","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","defaultApiConfig","domain","version","logErrors","environment","elements","instrumentFormSelector","loadingElementId","productElementId","reportElementId","loadingElement","productElement","reportElement","apiKey","debugApiKey","apiConfig","undefined","this","api","endpoint","Error","document","getElementById","insertLogScript","eventListeners","productId","_this","_ref","_ref$renderReport","renderReport","_ref$storage","storage","_ref$user","user","product","promise","loadFromStorage","requestProduct","then","storeInStorage","instruments","slots","triggerEvent","filter","status","getInstrumentStatusFromStorage","access_code","accessCode","reduce","previousStep","_ref2","requestInstrument","result","processApiInstrumentResponse","Promise","resolve","loadReport","reports","clearStorage","e","handleException","_this2","requestReport","body","_ref3","_this3","resources","updateInstrumentInStorage","loadResources","renderInstrument","runResourceFunctions","waitForInstrumentToSubmit","_ref4","form","submitInstrumentData","headers","Content-Type","X-123test-ApiKey","X-123test-ProductId","fetch","method","mode","response","json","product_access_code","cache","X-123test-InstrumentRun","text","get","JSON","parse","querySelector","addEventListener","event","preventDefault","buttons","getElementsByTagName","b","disabled","FormData","innerHTML","style","display","all","keys","map","reject","resourceItem","head","querySelectorAll","path","type","script","createElement","src","async","onload","appendChild","cssLink","rel","media","href","_this4","forEach","resource","its123","func","_this5","checkReponseStatus","error","statusText","url","store","localStorage","productData","started","Date","now","setItem","stringify","expirationTime","item","getItem","console","info","removeItem","Bugsnag","notifyException","_this6","releaseStage","typeName","report","find","r","eventName","data","listeners","l","callback","push"],"mappings":"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","file":"its123api.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _Its = __webpack_require__(1);\n\t\n\tvar _Its2 = _interopRequireDefault(_Its);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// Bind Its123 to the global window\n\twindow.Its123 = _Its2['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*\n\t123Test Api v2\n\t\n\t@license (c) 2016 Theo den Hollander & Wouter Bulten - http://www.123test.com/ - All rights reserved.\n\t*/\n\t\n\t/**\n\t * Default configuration for api, can be overriden by user\n\t * @type {Object}\n\t */\n\tvar defaultApiConfig = {\n\t  // Domain config\n\t  domain: 'https://api.123test.com',\n\t  version: 'v2',\n\t\n\t  // Environment config\n\t  logErrors: false,\n\t  environment: 'production',\n\t\n\t  // DOM config\n\t  elements: {\n\t    instrumentFormSelector: 'form.its123-instrument',\n\t    loadingElementId: 'its123api-loading',\n\t    productElementId: 'its123api-product',\n\t    reportElementId: 'its123api-report',\n\t    loadingElement: null,\n\t    productElement: null,\n\t    reportElement: null\n\t  },\n\t\n\t  apiKey: 'not-set'\n\t};\n\t\n\t/**\n\t * Api key for BugSnag (Optional)\n\t * @type {String}\n\t */\n\tvar debugApiKey = '';\n\t\n\t/**\n\t * Main API class\n\t */\n\t\n\tvar Its123 = function () {\n\t\n\t  /**\n\t   * Create new Api object\n\t   * @param  {Object} [apiConfig={}] Api configuration\n\t   * @return {void}\n\t   */\n\t  function Its123() {\n\t    var apiConfig = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    _classCallCheck(this, Its123);\n\t\n\t    // Set api config to default and override with parameters\n\t    this.api = _extends({}, defaultApiConfig, apiConfig);\n\t    // Construct correct api end point\n\t    this.api.endpoint = this.api.domain + '/' + this.api.version;\n\t    // Set env based on domain\n\t    this.api.environment = this.api.domain === 'https://api.123test.dev' ? 'development' : 'production';\n\t\n\t    // Check for valid api key\n\t    if (this.api.apiKey === 'not-set') {\n\t      throw new Error('Api key must be set when initalising Its123 object. Please check your api config.');\n\t    }\n\t\n\t    // Query the DOM and set options\n\t    this.api.elements.loadingElement = document.getElementById(this.api.elements.loadingElementId);\n\t    this.api.elements.productElement = document.getElementById(this.api.elements.productElementId);\n\t    this.api.elements.reportElement = document.getElementById(this.api.elements.reportElementId);\n\t    if (!this.api.elements.loadingElement || !this.api.elements.productElement || !this.api.elements.reportElement) {\n\t      throw new Error('Element for loading, product or report not found. Please check your HTML and Api config.');\n\t    }\n\t\n\t    // Insert BugSnag error reporting\n\t    if (this.api.logErrors) {\n\t      this.insertLogScript();\n\t    }\n\t\n\t    // Placeholder for eventlisteners\n\t    this.eventListeners = {};\n\t  }\n\t\n\t  /**\n\t   * Load a product\n\t   *\n\t   * Runs all the required sub steps from instrument to report. All promises are chained\n\t   * and the final promise returns the product data when resolved.\n\t   *\n\t   * Will automatically render the first report that is available. Set `renderReport` to false\n\t   * to counter this behaviour.\n\t   *\n\t   * Data structure of the product object:\n\t   *\n\t   * product = {\n\t   *  slots: {\n\t   *    instruments: [],\n\t   *    respondent: {},\n\t   *  },\n\t   *  reports: [],\n\t   *  access_code: null,\n\t   * };\n\t   *\n\t   * @param  {String} productId product to load\n\t   * @param  {Boolean} [renderReport=true] Set to true to automatically call the\n\t   *                                       report render functions\n\t   * @param  {Boolean} [storage=true]      Set to true to try loading product data\n\t   *                                       from local storage.\n\t   * @param  {String}  [user=''] Optional user UUID\n\t   * @return {Promise}\n\t   */\n\t\n\t\n\t  _createClass(Its123, [{\n\t    key: 'loadProduct',\n\t    value: function loadProduct(productId) {\n\t      var _this = this;\n\t\n\t      var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t      var _ref$renderReport = _ref.renderReport;\n\t      var renderReport = _ref$renderReport === undefined ? true : _ref$renderReport;\n\t      var _ref$storage = _ref.storage;\n\t      var storage = _ref$storage === undefined ? true : _ref$storage;\n\t      var _ref$user = _ref.user;\n\t      var user = _ref$user === undefined ? '' : _ref$user;\n\t\n\t      var product = {};\n\t      var promise = void 0;\n\t\n\t      if (storage) {\n\t        // Try to load product information from local storage, if it fails\n\t        // fall back to a API request\n\t        promise = this.loadFromStorage(productId, user)['catch'](function () {\n\t          return _this.requestProduct(productId, user)\n\t          // Store the requested product in the local store for future requests\n\t          .then(function (p) {\n\t            _this.storeInStorage(productId, p, user);\n\t            return p;\n\t          });\n\t        });\n\t      } else {\n\t        promise = this.requestProduct(productId, user);\n\t      }\n\t\n\t      promise = promise.then(function (p) {\n\t        product = p;\n\t        var instruments = product.slots.instruments;\n\t        _this.triggerEvent('instruments-loaded', instruments);\n\t\n\t        if (storage) {\n\t          // Filter any instruments that already have been completed\n\t          // Prevents unnecessary requests to the API\n\t          instruments = instruments.filter(function (i) {\n\t            var status = _this.getInstrumentStatusFromStorage(i.access_code);\n\t\n\t            switch (status) {\n\t              case 'ended-items':\n\t              case 'ended-skipped':\n\t              case 'ended-time':\n\t                _this.triggerEvent('instrument-already-completed', { accessCode: i.access_code, status: status });\n\t                return false;\n\t              case 'in-progress':\n\t                _this.triggerEvent('instrument-continue', { accessCode: i.access_code, status: status });\n\t                return true;\n\t              case 'started':\n\t              default:\n\t                return true;\n\t            }\n\t          });\n\t        }\n\t\n\t        // Run all instruments in series\n\t        // 'reduce' is used as a special construct to map a list of instruments\n\t        // to a chain of promises that resolve in series. The chain is fired by\n\t        // setting a 'Promise.resolve()' as the initial value.\n\t        return instruments.reduce(function (previousStep, _ref2) {\n\t          var accessCode = _ref2.access_code;\n\t          return previousStep.then(function () {\n\t            return _this.requestInstrument(accessCode);\n\t          }).then(function (result) {\n\t            _this.triggerEvent('instrument-started', { accessCode: accessCode, status: result.status });\n\t            return _this.processApiInstrumentResponse(accessCode, result);\n\t          });\n\t        }, Promise.resolve());\n\t      });\n\t\n\t      if (renderReport) {\n\t        // All instruments have been completed, render report\n\t        promise = promise.then(function () {\n\t          return _this.loadReport(product.reports[0].access_code);\n\t        });\n\t      }\n\t\n\t      // Return initial promise and make sure that returning the product is the last step in the chain\n\t      return promise\n\t      // Remove this session from the local storage\n\t      .then(function () {\n\t        return _this.clearStorage(productId, product.slots.instruments);\n\t      })\n\t      // Trigger event and pass product info\n\t      .then(function () {\n\t        return _this.triggerEvent('product-completed', product);\n\t      }).then(function () {\n\t        return product;\n\t      })\n\t      // Also add a catch, this removes the need of having individual catches for every fetch\n\t      ['catch'](function (e) {\n\t        if (storage) {\n\t          // Something could be wrong with our local store,\n\t          // clear it to prevent any future errors\n\t          _this.clearStorage(productId);\n\t        }\n\t        return _this.handleException(e);\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Load an render a report by its access code\n\t     * @param  {String} accessCode Access code for report\n\t     * @return {Promise}\n\t     */\n\t\n\t  }, {\n\t    key: 'loadReport',\n\t    value: function loadReport(accessCode) {\n\t      var _this2 = this;\n\t\n\t      return this.requestReport(accessCode).then(function (body) {\n\t        return _this2.renderReport(body);\n\t      }).then(function () {\n\t        return _this2.triggerEvent('report-ready');\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Process a single API response from an instrument call\n\t     *\n\t     * When the instrument is still running the function will return a new Promise\n\t     * that waits for a form submit.\n\t     *\n\t     * @param  {String} accessCode Access code for this instrument\n\t     * @param  {String} status     Current instrument status\n\t     * @param  {Array} resources  Resources to load\n\t     * @param  {String} body       Html to put in the DOM\n\t     * @return {Promise}\n\t     */\n\t\n\t  }, {\n\t    key: 'processApiInstrumentResponse',\n\t    value: function processApiInstrumentResponse(accessCode, _ref3) {\n\t      var _this3 = this;\n\t\n\t      var status = _ref3.status;\n\t      var resources = _ref3.resources;\n\t      var body = _ref3.body;\n\t\n\t      switch (status) {\n\t        case 'started':\n\t        case 'in-progress':\n\t          this.updateInstrumentInStorage(accessCode, status);\n\t          return this.loadResources(resources).then(function () {\n\t            return _this3.renderInstrument(body);\n\t          }).then(function () {\n\t            return _this3.runResourceFunctions(resources);\n\t          }).then(function () {\n\t            return _this3.waitForInstrumentToSubmit();\n\t          }).then(function (_ref4) {\n\t            var form = _ref4.form;\n\t            return _this3.submitInstrumentData(accessCode, form);\n\t          })\n\t          // Run function again until instrument has ended\n\t          .then(function (result) {\n\t            return _this3.processApiInstrumentResponse(accessCode, result);\n\t          });\n\t        case 'ended-items':\n\t        case 'ended-skipped':\n\t        case 'ended-time':\n\t          this.updateInstrumentInStorage(accessCode, status);\n\t          this.triggerEvent('instrument-completed', { accessCode: accessCode, status: status });\n\t          return Promise.resolve();\n\t        default:\n\t          throw new Error('Unexpected instrument status ' + status);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * (Async) Request a product from the api\n\t     *\n\t     * Promise returns an object contains all the instruments\n\t     * @param  {String} productId      ID of the product\n\t     * @param  {String} user UUID v4\n\t     * @return {Promise}\n\t     */\n\t\n\t  }, {\n\t    key: 'requestProduct',\n\t    value: function requestProduct(productId, user) {\n\t      var headers = {\n\t        'Content-Type': 'application/json',\n\t        'X-123test-ApiKey': this.api.apiKey,\n\t        'X-123test-ProductId': productId\n\t      };\n\t\n\t      if (user && user.length === 36) {\n\t        headers['X-123test-Respondent'] = user;\n\t      }\n\t\n\t      return fetch(this.api.endpoint + '/product/request-product', {\n\t        method: 'GET',\n\t        mode: 'cors',\n\t        headers: headers\n\t      }).then(function (response) {\n\t        return response.json();\n\t      }).then(function (json) {\n\t        return {\n\t          slots: json.slots,\n\t          reports: json.reports,\n\t          product_access_code: json.product_access_code\n\t        };\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Get information about a specific product running\n\t     * @param  {String} accessCode Access code for product run\n\t     * @return {Promise}\n\t     */\n\t\n\t  }, {\n\t    key: 'requestProductInfo',\n\t    value: function requestProductInfo(accessCode) {\n\t      var headers = {\n\t        'Content-Type': 'application/json',\n\t        'X-123test-ApiKey': this.api.apiKey\n\t      };\n\t\n\t      return fetch(this.api.endpoint + '/product/' + accessCode + '/overview', {\n\t        method: 'GET',\n\t        mode: 'cors',\n\t        headers: headers\n\t      }).then(function (response) {\n\t        return response.json();\n\t      }).then(function (json) {\n\t        return {\n\t          slots: json.slots,\n\t          reports: json.reports,\n\t          product_access_code: json.product_access_code\n\t        };\n\t      });\n\t    }\n\t\n\t    /**\n\t     * (Async) Request an instrument from the api\n\t     *\n\t     * Promise returns body and resources that need to be loaded\n\t     * @param  {String} accessCode Access code for the instrument\n\t     * @return {Promise}\n\t     */\n\t\n\t  }, {\n\t    key: 'requestInstrument',\n\t    value: function requestInstrument(accessCode) {\n\t      return fetch(this.api.endpoint + '/instrument/next-items', {\n\t        method: 'GET',\n\t        cache: 'no-cache',\n\t        headers: {\n\t          'X-123test-ApiKey': this.api.apiKey,\n\t          'X-123test-InstrumentRun': accessCode\n\t        }\n\t      })\n\t      // reponse.text() returns a Promise so we add an extra closure here\n\t      // to also access the resource variable itself\n\t      .then(function (response) {\n\t        return response.text().then(function (body) {\n\t          return {\n\t            body: body,\n\t            status: response.headers.get('X-123test-InstrumentStatus'),\n\t            resources: JSON.parse(response.headers.get('X-123test-Resources'))\n\t          };\n\t        });\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Attach a listener to the instrument, makes use of a promise that resolves\n\t     * when the button is clicked.\n\t     * @return {Promise}\n\t     */\n\t\n\t  }, {\n\t    key: 'waitForInstrumentToSubmit',\n\t    value: function waitForInstrumentToSubmit() {\n\t      var form = document.querySelector(this.api.elements.instrumentFormSelector);\n\t\n\t      // Return a new promise that resolves when the submit button is clicked\n\t      return new Promise(function (resolve) {\n\t        form.addEventListener('submit', function (event) {\n\t          event.preventDefault();\n\t\n\t          // Disable all buttons in the form\n\t          var buttons = event.target.getElementsByTagName('button');\n\t          for (var b = 0; b < buttons.length; b++) {\n\t            buttons[b].disabled = true;\n\t          }\n\t          resolve({ form: form, event: event });\n\t        });\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Submit a form to the API for a given instrument\n\t     * @param  {String} accessCode Access code of the instrument\n\t     * @param  {Object} form       HTML Form\n\t     * @return {Promise}\n\t     */\n\t\n\t  }, {\n\t    key: 'submitInstrumentData',\n\t    value: function submitInstrumentData(accessCode, form) {\n\t      return fetch(this.api.endpoint + '/instrument/next-items', {\n\t        method: 'POST',\n\t        cache: 'no-cache',\n\t        body: new FormData(form),\n\t        headers: {\n\t          'X-123test-ApiKey': this.api.apiKey,\n\t          'X-123test-InstrumentRun': accessCode\n\t        }\n\t      }).then(function (response) {\n\t        return response.text().then(function (body) {\n\t          return {\n\t            body: body,\n\t            status: response.headers.get('X-123test-InstrumentStatus'),\n\t            resources: JSON.parse(response.headers.get('X-123test-Resources'))\n\t          };\n\t        });\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Output an instrument to the DOM\n\t     * @param  {String} body Instrument HTML\n\t     * @return {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'renderInstrument',\n\t    value: function renderInstrument(body) {\n\t      this.api.elements.productElement.innerHTML = body;\n\t      this.api.elements.loadingElement.style.display = 'none';\n\t      this.api.elements.productElement.style.display = 'initial';\n\t    }\n\t\n\t    /**\n\t     * Render a report to the DOM\n\t     *\n\t     * @param  {String} body report body\n\t     * @return {Promise}\n\t     */\n\t\n\t  }, {\n\t    key: 'renderReport',\n\t    value: function renderReport(body) {\n\t      this.api.elements.productElement.style.display = 'none';\n\t      this.api.elements.loadingElement.style.display = 'none';\n\t      this.api.elements.reportElement.innerHTML = body;\n\t      this.api.elements.reportElement.style.display = 'initial';\n\t    }\n\t\n\t    /**\n\t     * Add new resources to the DOM\n\t     *\n\t     * Returns a new Promise that resolves when all critical assets have been loaded\n\t     * @param  {Object} resources The resources to load\n\t     * @return {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'loadResources',\n\t    value: function loadResources(resources) {\n\t      // Map each resource to a new Promise\n\t      // JS resources resolve when loaded\n\t      return Promise.all(Object.keys(resources).map(function (key) {\n\t        return new Promise(function (resolve, reject) {\n\t          var resourceItem = resources[key];\n\t          var head = document.getElementsByTagName('head')[0];\n\t\n\t          // Do not load resources that are already present\n\t          if (document.querySelectorAll('script[src=\"' + resourceItem.path + '\"]').length > 0) {\n\t            resolve();\n\t            return;\n\t          }\n\t          switch (resourceItem.type) {\n\t            case 'js':\n\t              {\n\t                var script = document.createElement('script');\n\t                script.src = resourceItem.path;\n\t                // Allow some files to not load asynchronous\n\t                script.async = resourceItem.async || false;\n\t                // Resolve when loaded\n\t                script.onload = resolve;\n\t                // Append to the head of the page\n\t                head.appendChild(script);\n\t              }\n\t              break;\n\t            case 'css':\n\t              {\n\t                var cssLink = document.createElement('link');\n\t                cssLink.rel = 'stylesheet';\n\t                cssLink.type = 'text/css';\n\t                cssLink.media = 'all';\n\t                cssLink.href = resourceItem.path;\n\t                // Append to the head of the page\n\t                head.appendChild(cssLink);\n\t\n\t                // Directy resolve css, not critical\n\t                resolve();\n\t              }\n\t              break;\n\t            default:\n\t              reject('Unknown resource type ' + resourceItem.type);\n\t          }\n\t        });\n\t      }));\n\t    }\n\t\n\t    /**\n\t     * Run functions for a list of JS resources\n\t     * @param  {Object} resources\n\t     * @return {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'runResourceFunctions',\n\t    value: function runResourceFunctions(resources) {\n\t      var _this4 = this;\n\t\n\t      Object.keys(resources).forEach(function (key) {\n\t        var resource = resources[key];\n\t        if (resource.type === 'js' && typeof window.its123[resource.func] === 'function') {\n\t          // Give context as variable\n\t          window.its123[resource.func](_this4.api);\n\t        }\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Request a report by its access code\n\t     * @param  {String} accessCode access code for the report\n\t     * @return {Promise}\n\t     */\n\t\n\t  }, {\n\t    key: 'requestReport',\n\t    value: function requestReport(accessCode) {\n\t      var _this5 = this;\n\t\n\t      return fetch(this.api.endpoint + '/report/' + accessCode, {\n\t        headers: {\n\t          'X-123test-ApiKey': this.api.apiKey\n\t        },\n\t        method: 'GET',\n\t        mode: 'cors'\n\t      }).then(function (response) {\n\t        return _this5.checkReponseStatus(response);\n\t      }).then(function (response) {\n\t        return response.text();\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Validate API response\n\t     * @param  {Object} response Response object\n\t     * @return {Object}\n\t     */\n\t\n\t  }, {\n\t    key: 'checkReponseStatus',\n\t    value: function checkReponseStatus(response) {\n\t      if (response.status >= 200 && response.status < 300) {\n\t        return response;\n\t      }\n\t\n\t      var error = new Error(response.statusText + ' ' + response.url);\n\t      error.response = response;\n\t      throw error;\n\t    }\n\t\n\t    /**\n\t     * Store a product in the local storage\n\t     * @param  {String} productId Id of the product\n\t     * @param  {object} product   Product information\n\t     * @param  {String} user      User UUID\n\t     * @return {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'storeInStorage',\n\t    value: function storeInStorage(productId, product, user) {\n\t      var store = window.localStorage;\n\t\n\t      // Check browser support\n\t      if (!store) {\n\t        return;\n\t      }\n\t\n\t      // Add new record\n\t      var productData = _extends({}, product, {\n\t        user: user,\n\t        started: Date.now()\n\t      });\n\t\n\t      store.setItem('its123Api-' + productId, JSON.stringify(productData));\n\t    }\n\t\n\t    /**\n\t     * Load a product from the storage\n\t     *\n\t     * Returns a promise that resolves when a local storage item has been found.\n\t     * @param  {String} productId             Product id\n\t     * @param  {String} [user='']             User UUID\n\t     * @param  {Number} [expirationTime=3600] Max lifetime of storage entry in seconds\n\t     * @return {Promise}\n\t     */\n\t\n\t  }, {\n\t    key: 'loadFromStorage',\n\t    value: function loadFromStorage(productId) {\n\t      var user = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];\n\t      var expirationTime = arguments.length <= 2 || arguments[2] === undefined ? 3600 : arguments[2];\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        var store = window.localStorage;\n\t        var item = 'its123Api-' + productId;\n\t\n\t        // Check browser support and presence of object\n\t        if (!store || !store.getItem(item)) {\n\t          reject('No support or storage present');\n\t        }\n\t\n\t        var product = JSON.parse(store.getItem(item));\n\t\n\t        if (product && product.started + expirationTime * 1000 > Date.now() && product.user === user) {\n\t          console.info('Loading instrument from local storage.');\n\t          resolve(product);\n\t        }\n\t\n\t        reject('No product in local store');\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Clear the local storage of all items\n\t     * @return {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'clearStorage',\n\t    value: function clearStorage(productId) {\n\t      var instruments = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\t\n\t      var store = window.localStorage;\n\t\n\t      if (!store) {\n\t        return;\n\t      }\n\t\n\t      store.removeItem('its123Api-' + productId);\n\t      instruments.forEach(function (i) {\n\t        return store.removeItem('its123Api-' + i.access_code);\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Set the current state of an instrument in storage\n\t     * @param  {String} accessCode Access code for instrument\n\t     * @param  {String} status     Status indicator\n\t     * @return {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'updateInstrumentInStorage',\n\t    value: function updateInstrumentInStorage(accessCode, status) {\n\t      var store = window.localStorage;\n\t\n\t      if (!store) {\n\t        return;\n\t      }\n\t\n\t      store.setItem('its123Api-' + accessCode, status);\n\t    }\n\t\n\t    /**\n\t     * Get status of an instrument from storage\n\t     * @param  {String} accessCode Access code for instrument\n\t     * @return {String|null} Status\n\t     */\n\t\n\t  }, {\n\t    key: 'getInstrumentStatusFromStorage',\n\t    value: function getInstrumentStatusFromStorage(accessCode) {\n\t      var store = window.localStorage;\n\t\n\t      if (!store) {\n\t        return null;\n\t      }\n\t\n\t      return store.getItem('its123Api-' + accessCode);\n\t    }\n\t\n\t    /**\n\t     * Log an exception and retrow\n\t     * @param  {Object} e The error\n\t     * @return {Object}   the error\n\t     */\n\t\n\t  }, {\n\t    key: 'handleException',\n\t    value: function handleException(e) {\n\t      if (this.api.logErrors) {\n\t        if (typeof Bugsnag === 'function') {\n\t          Bugsnag.notifyException(e, 'API its123api');\n\t        }\n\t      }\n\t      throw e;\n\t    }\n\t\n\t    /**\n\t     * Insert a log script in to the dom\n\t     * @return void\n\t     */\n\t\n\t  }, {\n\t    key: 'insertLogScript',\n\t    value: function insertLogScript() {\n\t      var _this6 = this;\n\t\n\t      var head = document.getElementsByTagName('head')[0];\n\t      var script = document.createElement('script');\n\t      script.src = this.api.domain + '/logIts123.js';\n\t      script.onload = function () {\n\t        /* global Bugsnag */\n\t        Bugsnag.apiKey = debugApiKey;\n\t        Bugsnag.releaseStage = _this6.api.environment;\n\t      };\n\t      head.appendChild(script);\n\t    }\n\t\n\t    /**\n\t     * Utility function to get the url to a PDF report for a given product object\n\t     * @param  {Object} product               The product that contains the report list\n\t     * @param  {String} [typeName='standard'] Can be 'standard' or 'premium'\n\t     * @return {String}                       Url to the report\n\t     */\n\t\n\t  }, {\n\t    key: 'getPdfUrl',\n\t    value: function getPdfUrl(product) {\n\t      var typeName = arguments.length <= 1 || arguments[1] === undefined ? 'standard' : arguments[1];\n\t\n\t      // Get correct type id for premium or standard pdf\n\t      var type = typeName === 'premium' ? 221 : 121;\n\t      var report = product.reports.find(function (r) {\n\t        return r.type === type;\n\t      });\n\t\n\t      if (!report) {\n\t        throw new Error('No access code for pdf is present in product object.');\n\t      }\n\t\n\t      return this.api.endpoint + '/report/' + report.access_code;\n\t    }\n\t\n\t    /**\n\t     * Send a new event to the listeners\n\t     * @param  {String} eventName Name of the event\n\t     * @param  {Object} data      Optional event data\n\t     * @return {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'triggerEvent',\n\t    value: function triggerEvent(eventName, data) {\n\t      var listeners = this.eventListeners[eventName];\n\t\n\t      if (listeners && listeners.length > 0) {\n\t        listeners.forEach(function (l) {\n\t          return l(data);\n\t        });\n\t      }\n\t\n\t      if (this.api.environment === 'development') {\n\t        console.info('Event triggered: ' + eventName);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Register a new event listener\n\t     * @param  {String}   eventName Name of the event\n\t     * @param  {Function} callback\n\t     * @return {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'on',\n\t    value: function on(eventName, callback) {\n\t      if (!this.eventListeners[eventName]) {\n\t        this.eventListeners[eventName] = [];\n\t      }\n\t\n\t      this.eventListeners[eventName].push(callback);\n\t    }\n\t  }]);\n\t\n\t  return Its123;\n\t}();\n\t\n\texports['default'] = Its123;\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** its123api.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap fd6b9beb1723572beea5\n **/","import Its123 from './Api/Its123';\n\n// Bind Its123 to the global window\nwindow.Its123 = Its123;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/main.js\n **/","/*\n123Test Api v2\n\n@license (c) 2016 Theo den Hollander & Wouter Bulten - http://www.123test.com/ - All rights reserved.\n*/\n\n/**\n * Default configuration for api, can be overriden by user\n * @type {Object}\n */\nconst defaultApiConfig = {\n  // Domain config\n  domain: 'https://api.123test.com',\n  version: 'v2',\n\n  // Environment config\n  logErrors: false,\n  environment: 'production',\n\n  // DOM config\n  elements: {\n    instrumentFormSelector: 'form.its123-instrument',\n    loadingElementId: 'its123api-loading',\n    productElementId: 'its123api-product',\n    reportElementId: 'its123api-report',\n    loadingElement: null,\n    productElement: null,\n    reportElement: null,\n  },\n\n  apiKey: 'not-set',\n};\n\n/**\n * Api key for BugSnag (Optional)\n * @type {String}\n */\nconst debugApiKey = '';\n\n/**\n * Main API class\n */\nclass Its123 {\n\n  /**\n   * Create new Api object\n   * @param  {Object} [apiConfig={}] Api configuration\n   * @return {void}\n   */\n  constructor(apiConfig = {}) {\n    // Set api config to default and override with parameters\n    this.api = {\n      ...defaultApiConfig,\n      ...apiConfig,\n    };\n    // Construct correct api end point\n    this.api.endpoint = `${this.api.domain}/${this.api.version}`;\n    // Set env based on domain\n    this.api.environment =\n      (this.api.domain === 'https://api.123test.dev') ? 'development' : 'production';\n\n    // Check for valid api key\n    if (this.api.apiKey === 'not-set') {\n      throw new Error(\n        'Api key must be set when initalising Its123 object. Please check your api config.'\n      );\n    }\n\n    // Query the DOM and set options\n    this.api.elements.loadingElement = document.getElementById(this.api.elements.loadingElementId);\n    this.api.elements.productElement = document.getElementById(this.api.elements.productElementId);\n    this.api.elements.reportElement = document.getElementById(this.api.elements.reportElementId);\n    if (!this.api.elements.loadingElement\n      || !this.api.elements.productElement || !this.api.elements.reportElement) {\n      throw new Error(\n        'Element for loading, product or report not found. Please check your HTML and Api config.'\n      );\n    }\n\n    // Insert BugSnag error reporting\n    if (this.api.logErrors) {\n      this.insertLogScript();\n    }\n\n    // Placeholder for eventlisteners\n    this.eventListeners = {};\n  }\n\n  /**\n   * Load a product\n   *\n   * Runs all the required sub steps from instrument to report. All promises are chained\n   * and the final promise returns the product data when resolved.\n   *\n   * Will automatically render the first report that is available. Set `renderReport` to false\n   * to counter this behaviour.\n   *\n   * Data structure of the product object:\n   *\n   * product = {\n   *  slots: {\n   *    instruments: [],\n   *    respondent: {},\n   *  },\n   *  reports: [],\n   *  access_code: null,\n   * };\n   *\n   * @param  {String} productId product to load\n   * @param  {Boolean} [renderReport=true] Set to true to automatically call the\n   *                                       report render functions\n   * @param  {Boolean} [storage=true]      Set to true to try loading product data\n   *                                       from local storage.\n   * @param  {String}  [user=''] Optional user UUID\n   * @return {Promise}\n   */\n  loadProduct(productId, { renderReport = true, storage = true, user = '' } = {}) {\n    let product = {};\n    let promise;\n\n    if (storage) {\n      // Try to load product information from local storage, if it fails\n      // fall back to a API request\n      promise = this.loadFromStorage(productId, user)\n        .catch(() => this.requestProduct(productId, user)\n          // Store the requested product in the local store for future requests\n          .then((p) => {\n            this.storeInStorage(productId, p, user);\n            return p;\n          })\n        );\n    } else {\n      promise = this.requestProduct(productId, user);\n    }\n\n    promise = promise.then((p) => {\n      product = p;\n      let instruments = product.slots.instruments;\n      this.triggerEvent('instruments-loaded', instruments);\n\n      if (storage) {\n        // Filter any instruments that already have been completed\n        // Prevents unnecessary requests to the API\n        instruments = instruments.filter((i => {\n          const status = this.getInstrumentStatusFromStorage(i.access_code);\n\n          switch (status) {\n            case 'ended-items':\n            case 'ended-skipped':\n            case 'ended-time':\n              this.triggerEvent('instrument-already-completed',\n                { accessCode: i.access_code, status });\n              return false;\n            case 'in-progress':\n              this.triggerEvent('instrument-continue',\n                { accessCode: i.access_code, status });\n              return true;\n            case 'started':\n            default:\n              return true;\n          }\n        }));\n      }\n\n      // Run all instruments in series\n      // 'reduce' is used as a special construct to map a list of instruments\n      // to a chain of promises that resolve in series. The chain is fired by\n      // setting a 'Promise.resolve()' as the initial value.\n      return instruments.reduce((previousStep, { access_code: accessCode }) => (\n        previousStep\n          .then(() => this.requestInstrument(accessCode))\n          .then((result) => {\n            this.triggerEvent('instrument-started', { accessCode, status: result.status });\n            return this.processApiInstrumentResponse(accessCode, result);\n          })\n      ), Promise.resolve());\n    });\n\n    if (renderReport) {\n      // All instruments have been completed, render report\n      promise = promise.then(() => this.loadReport(product.reports[0].access_code));\n    }\n\n    // Return initial promise and make sure that returning the product is the last step in the chain\n    return promise\n      // Remove this session from the local storage\n      .then(() => this.clearStorage(productId, product.slots.instruments))\n      // Trigger event and pass product info\n      .then(() => this.triggerEvent('product-completed', product))\n      .then(() => product)\n      // Also add a catch, this removes the need of having individual catches for every fetch\n      .catch((e) => {\n        if (storage) {\n          // Something could be wrong with our local store,\n          // clear it to prevent any future errors\n          this.clearStorage(productId);\n        }\n        return this.handleException(e);\n      });\n  }\n\n  /**\n   * Load an render a report by its access code\n   * @param  {String} accessCode Access code for report\n   * @return {Promise}\n   */\n  loadReport(accessCode) {\n    return this.requestReport(accessCode)\n      .then((body) => this.renderReport(body))\n      .then(() => this.triggerEvent('report-ready'));\n  }\n\n  /**\n   * Process a single API response from an instrument call\n   *\n   * When the instrument is still running the function will return a new Promise\n   * that waits for a form submit.\n   *\n   * @param  {String} accessCode Access code for this instrument\n   * @param  {String} status     Current instrument status\n   * @param  {Array} resources  Resources to load\n   * @param  {String} body       Html to put in the DOM\n   * @return {Promise}\n   */\n  processApiInstrumentResponse(accessCode, { status, resources, body }) {\n    switch (status) {\n      case 'started':\n      case 'in-progress':\n        this.updateInstrumentInStorage(accessCode, status);\n        return this.loadResources(resources)\n          .then(() => this.renderInstrument(body))\n          .then(() => this.runResourceFunctions(resources))\n          .then(() => this.waitForInstrumentToSubmit())\n          .then(({ form }) => this.submitInstrumentData(accessCode, form))\n          // Run function again until instrument has ended\n          .then((result) => this.processApiInstrumentResponse(accessCode, result));\n      case 'ended-items':\n      case 'ended-skipped':\n      case 'ended-time':\n        this.updateInstrumentInStorage(accessCode, status);\n        this.triggerEvent('instrument-completed', { accessCode, status });\n        return Promise.resolve();\n      default:\n        throw new Error(`Unexpected instrument status ${status}`);\n    }\n  }\n\n  /**\n   * (Async) Request a product from the api\n   *\n   * Promise returns an object contains all the instruments\n   * @param  {String} productId      ID of the product\n   * @param  {String} user UUID v4\n   * @return {Promise}\n   */\n  requestProduct(productId, user) {\n    const headers = {\n      'Content-Type': 'application/json',\n      'X-123test-ApiKey': this.api.apiKey,\n      'X-123test-ProductId': productId,\n    };\n\n    if (user && user.length === 36) {\n      headers['X-123test-Respondent'] = user;\n    }\n\n    return fetch(`${this.api.endpoint}/product/request-product`, {\n      method: 'GET',\n      mode: 'cors',\n      headers,\n    })\n    .then((response) => response.json())\n    .then((json) => ({\n      slots: json.slots,\n      reports: json.reports,\n      product_access_code: json.product_access_code,\n    }));\n  }\n\n  /**\n   * Get information about a specific product running\n   * @param  {String} accessCode Access code for product run\n   * @return {Promise}\n   */\n  requestProductInfo(accessCode) {\n    const headers = {\n      'Content-Type': 'application/json',\n      'X-123test-ApiKey': this.api.apiKey,\n    };\n\n    return fetch(`${this.api.endpoint}/product/${accessCode}/overview`, {\n      method: 'GET',\n      mode: 'cors',\n      headers,\n    })\n    .then((response) => response.json())\n    .then((json) => ({\n      slots: json.slots,\n      reports: json.reports,\n      product_access_code: json.product_access_code,\n    }));\n  }\n\n  /**\n   * (Async) Request an instrument from the api\n   *\n   * Promise returns body and resources that need to be loaded\n   * @param  {String} accessCode Access code for the instrument\n   * @return {Promise}\n   */\n  requestInstrument(accessCode) {\n    return fetch(`${this.api.endpoint}/instrument/next-items`, {\n      method: 'GET',\n      cache: 'no-cache',\n      headers: {\n        'X-123test-ApiKey': this.api.apiKey,\n        'X-123test-InstrumentRun': accessCode,\n      },\n    })\n    // reponse.text() returns a Promise so we add an extra closure here\n    // to also access the resource variable itself\n    .then((response) => response.text()\n      .then((body) => ({\n        body,\n        status: response.headers.get('X-123test-InstrumentStatus'),\n        resources: JSON.parse(response.headers.get('X-123test-Resources')),\n      }))\n    );\n  }\n\n  /**\n   * Attach a listener to the instrument, makes use of a promise that resolves\n   * when the button is clicked.\n   * @return {Promise}\n   */\n  waitForInstrumentToSubmit() {\n    const form = document.querySelector(this.api.elements.instrumentFormSelector);\n\n    // Return a new promise that resolves when the submit button is clicked\n    return new Promise((resolve) => {\n      form.addEventListener('submit', (event) => {\n        event.preventDefault();\n\n        // Disable all buttons in the form\n        const buttons = event.target.getElementsByTagName('button');\n        for (let b = 0; b < buttons.length; b++) {\n          buttons[b].disabled = true;\n        }\n        resolve({ form, event });\n      });\n    });\n  }\n\n  /**\n   * Submit a form to the API for a given instrument\n   * @param  {String} accessCode Access code of the instrument\n   * @param  {Object} form       HTML Form\n   * @return {Promise}\n   */\n  submitInstrumentData(accessCode, form) {\n    return fetch(`${this.api.endpoint}/instrument/next-items`, {\n      method: 'POST',\n      cache: 'no-cache',\n      body: new FormData(form),\n      headers: {\n        'X-123test-ApiKey': this.api.apiKey,\n        'X-123test-InstrumentRun': accessCode,\n      },\n    })\n    .then((response) => response.text()\n      .then((body) => ({\n        body,\n        status: response.headers.get('X-123test-InstrumentStatus'),\n        resources: JSON.parse(response.headers.get('X-123test-Resources')),\n      }))\n    );\n  }\n\n  /**\n   * Output an instrument to the DOM\n   * @param  {String} body Instrument HTML\n   * @return {void}\n   */\n  renderInstrument(body) {\n    this.api.elements.productElement.innerHTML = body;\n    this.api.elements.loadingElement.style.display = 'none';\n    this.api.elements.productElement.style.display = 'initial';\n  }\n\n  /**\n   * Render a report to the DOM\n   *\n   * @param  {String} body report body\n   * @return {Promise}\n   */\n  renderReport(body) {\n    this.api.elements.productElement.style.display = 'none';\n    this.api.elements.loadingElement.style.display = 'none';\n    this.api.elements.reportElement.innerHTML = body;\n    this.api.elements.reportElement.style.display = 'initial';\n  }\n\n  /**\n   * Add new resources to the DOM\n   *\n   * Returns a new Promise that resolves when all critical assets have been loaded\n   * @param  {Object} resources The resources to load\n   * @return {void}\n   */\n  loadResources(resources) {\n    // Map each resource to a new Promise\n    // JS resources resolve when loaded\n    return Promise.all(Object.keys(resources).map((key) => (\n      new Promise((resolve, reject) => {\n        const resourceItem = resources[key];\n        const head = document.getElementsByTagName('head')[0];\n\n        // Do not load resources that are already present\n        if (document.querySelectorAll(`script[src=\"${resourceItem.path}\"]`).length > 0) {\n          resolve();\n          return;\n        }\n        switch (resourceItem.type) {\n          case 'js': {\n            const script = document.createElement('script');\n            script.src = resourceItem.path;\n            // Allow some files to not load asynchronous\n            script.async = resourceItem.async || false;\n            // Resolve when loaded\n            script.onload = resolve;\n            // Append to the head of the page\n            head.appendChild(script);\n          }\n            break;\n          case 'css': {\n            const cssLink = document.createElement('link');\n            cssLink.rel = 'stylesheet';\n            cssLink.type = 'text/css';\n            cssLink.media = 'all';\n            cssLink.href = resourceItem.path;\n            // Append to the head of the page\n            head.appendChild(cssLink);\n\n            // Directy resolve css, not critical\n            resolve();\n          }\n            break;\n          default:\n            reject(`Unknown resource type ${resourceItem.type}`);\n        }\n      })\n    )));\n  }\n\n  /**\n   * Run functions for a list of JS resources\n   * @param  {Object} resources\n   * @return {void}\n   */\n  runResourceFunctions(resources) {\n    Object.keys(resources).forEach((key) => {\n      const resource = resources[key];\n      if (resource.type === 'js'\n        && typeof window.its123[resource.func] === 'function') {\n        // Give context as variable\n        window.its123[resource.func](this.api);\n      }\n    });\n  }\n\n  /**\n   * Request a report by its access code\n   * @param  {String} accessCode access code for the report\n   * @return {Promise}\n   */\n  requestReport(accessCode) {\n    return fetch(`${this.api.endpoint}/report/${accessCode}`, {\n      headers: {\n        'X-123test-ApiKey': this.api.apiKey,\n      },\n      method: 'GET',\n      mode: 'cors',\n    })\n      .then((response) => this.checkReponseStatus(response))\n      .then((response) => response.text());\n  }\n\n  /**\n   * Validate API response\n   * @param  {Object} response Response object\n   * @return {Object}\n   */\n  checkReponseStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    }\n\n    const error = new Error(`${response.statusText} ${response.url}`);\n    error.response = response;\n    throw error;\n  }\n\n  /**\n   * Store a product in the local storage\n   * @param  {String} productId Id of the product\n   * @param  {object} product   Product information\n   * @param  {String} user      User UUID\n   * @return {void}\n   */\n  storeInStorage(productId, product, user) {\n    const store = window.localStorage;\n\n    // Check browser support\n    if (!store) {\n      return;\n    }\n\n    // Add new record\n    const productData = {\n      ...product,\n      user,\n      started: Date.now(),\n    };\n\n    store.setItem(`its123Api-${productId}`, JSON.stringify(productData));\n  }\n\n  /**\n   * Load a product from the storage\n   *\n   * Returns a promise that resolves when a local storage item has been found.\n   * @param  {String} productId             Product id\n   * @param  {String} [user='']             User UUID\n   * @param  {Number} [expirationTime=3600] Max lifetime of storage entry in seconds\n   * @return {Promise}\n   */\n  loadFromStorage(productId, user = '', expirationTime = 3600) {\n    return new Promise((resolve, reject) => {\n      const store = window.localStorage;\n      const item = `its123Api-${productId}`;\n\n      // Check browser support and presence of object\n      if (!store || !store.getItem(item)) {\n        reject('No support or storage present');\n      }\n\n      const product = JSON.parse(store.getItem(item));\n\n      if (product && (product.started + (expirationTime * 1000)) > Date.now()\n        && product.user === user) {\n        console.info('Loading instrument from local storage.');\n        resolve(product);\n      }\n\n      reject('No product in local store');\n    });\n  }\n\n  /**\n   * Clear the local storage of all items\n   * @return {void}\n   */\n  clearStorage(productId, instruments = []) {\n    const store = window.localStorage;\n\n    if (!store) {\n      return;\n    }\n\n    store.removeItem(`its123Api-${productId}`);\n    instruments.forEach(i => store.removeItem(`its123Api-${i.access_code}`));\n  }\n\n  /**\n   * Set the current state of an instrument in storage\n   * @param  {String} accessCode Access code for instrument\n   * @param  {String} status     Status indicator\n   * @return {void}\n   */\n  updateInstrumentInStorage(accessCode, status) {\n    const store = window.localStorage;\n\n    if (!store) {\n      return;\n    }\n\n    store.setItem(`its123Api-${accessCode}`, status);\n  }\n\n  /**\n   * Get status of an instrument from storage\n   * @param  {String} accessCode Access code for instrument\n   * @return {String|null} Status\n   */\n  getInstrumentStatusFromStorage(accessCode) {\n    const store = window.localStorage;\n\n    if (!store) {\n      return null;\n    }\n\n    return store.getItem(`its123Api-${accessCode}`);\n  }\n\n  /**\n   * Log an exception and retrow\n   * @param  {Object} e The error\n   * @return {Object}   the error\n   */\n  handleException(e) {\n    if (this.api.logErrors) {\n      if (typeof Bugsnag === 'function') {\n        Bugsnag.notifyException(e, 'API its123api');\n      }\n    }\n    throw e;\n  }\n\n  /**\n   * Insert a log script in to the dom\n   * @return void\n   */\n  insertLogScript() {\n    const head = document.getElementsByTagName('head')[0];\n    const script = document.createElement('script');\n    script.src = `${this.api.domain}/logIts123.js`;\n    script.onload = () => {\n      /* global Bugsnag */\n      Bugsnag.apiKey = debugApiKey;\n      Bugsnag.releaseStage = this.api.environment;\n    };\n    head.appendChild(script);\n  }\n\n  /**\n   * Utility function to get the url to a PDF report for a given product object\n   * @param  {Object} product               The product that contains the report list\n   * @param  {String} [typeName='standard'] Can be 'standard' or 'premium'\n   * @return {String}                       Url to the report\n   */\n  getPdfUrl(product, typeName = 'standard') {\n    // Get correct type id for premium or standard pdf\n    const type = (typeName === 'premium') ? 221 : 121;\n    const report = product.reports.find((r) => r.type === type);\n\n    if (!report) {\n      throw new Error('No access code for pdf is present in product object.');\n    }\n\n    return `${this.api.endpoint}/report/${report.access_code}`;\n  }\n\n  /**\n   * Send a new event to the listeners\n   * @param  {String} eventName Name of the event\n   * @param  {Object} data      Optional event data\n   * @return {void}\n   */\n  triggerEvent(eventName, data) {\n    const listeners = this.eventListeners[eventName];\n\n    if (listeners && listeners.length > 0) {\n      listeners.forEach((l) => l(data));\n    }\n\n    if (this.api.environment === 'development') {\n      console.info(`Event triggered: ${eventName}`);\n    }\n  }\n\n  /**\n   * Register a new event listener\n   * @param  {String}   eventName Name of the event\n   * @param  {Function} callback\n   * @return {void}\n   */\n  on(eventName, callback) {\n    if (!this.eventListeners[eventName]) {\n      this.eventListeners[eventName] = [];\n    }\n\n    this.eventListeners[eventName].push(callback);\n  }\n}\n\nexport default Its123;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Api/Its123.js\n **/"],"sourceRoot":""}